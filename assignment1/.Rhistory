}
#L[i] = L[i]/N
#C[i] = C[i]/N
}
p <- 10^(seq(-4,0,0.1))
N = 100
L <- rep(0,length(p))
C <- rep(0,length(p))
for (i in 1:length(p)) {
for (j in 1:N) {
g <- sample_smallworld(1,500,4,p[i])
L[i] = L[i] + transitivity(g, "global")/N
C[i] = C[i] + average.path.length(g)/N
}
#L[i] = L[i]/N
#C[i] = C[i]/N
}
L <- L/L[1]
C <- C/C[1]
plot(p, L, ylim = c(0,1), ylab='coeff', xlab='p', pch=0, log='x')
points(p, C, ylim = c(0,1), ylab='coeff', xlab='p', pch=16)
legend("bottomleft", inset=.02,c('C(p)/C(0)','L(p)/L(0)'), pch=c(0,16))
for (i in 1:length(p)) {
for (j in 1:N) {
g <- sample_smallworld(1,100,5,p[i])
L[i] = L[i] + transitivity(g, "global")/N
C[i] = C[i] + average.path.length(g)/N
}
#L[i] = L[i]/N
#C[i] = C[i]/N
}
L <- L/L[1]
C <- C/C[1]
plot(p, L, ylim = c(0,1), ylab='coeff', xlab='p', pch=0, log='x')
points(p, C, ylim = c(0,1), ylab='coeff', xlab='p', pch=16)
legend("bottomleft", inset=.02,c('C(p)/C(0)','L(p)/L(0)'), pch=c(0,16))
g <- sample_smallworld(1,100,2,p[i])
for (i in 1:length(p)) {
for (j in 1:N) {
g <- sample_smallworld(1,100,2,p[i])
L[i] = L[i] + transitivity(g, "global")/N
C[i] = C[i] + average.path.length(g)/N
}
#L[i] = L[i]/N
#C[i] = C[i]/N
}
L <- L/L[1]
C <- C/C[1]
plot(p, L, ylim = c(0,1), ylab='coeff', xlab='p', pch=0, log='x')
points(p, C, ylim = c(0,1), ylab='coeff', xlab='p', pch=16)
legend("bottomleft", inset=.02,c('C(p)/C(0)','L(p)/L(0)'), pch=c(0,16))
for (i in 1:length(p)) {
for (j in 1:N) {
g <- sample_smallworld(1,200,2,p[i])
L[i] = L[i] + transitivity(g, "global")/N
C[i] = C[i] + average.path.length(g)/N
}
#L[i] = L[i]/N
#C[i] = C[i]/N
}
L <- L/L[1]
C <- C/C[1]
plot(p, L, ylim = c(0,1), ylab='coeff', xlab='p', pch=0, log='x')
points(p, C, ylim = c(0,1), ylab='coeff', xlab='p', pch=16)
legend("bottomleft", inset=.02,c('C(p)/C(0)','L(p)/L(0)'), pch=c(0,16))
for (i in 1:length(p)) {
for (j in 1:N) {
g <- sample_smallworld(1,200,5,p[i])
L[i] = L[i] + transitivity(g, "global")/N
C[i] = C[i] + average.path.length(g)/N
}
#L[i] = L[i]/N
#C[i] = C[i]/N
}
L <- L/L[1]
C <- C/C[1]
plot(p, L, ylim = c(0,1), ylab='coeff', xlab='p', pch=0, log='x')
points(p, C, ylim = c(0,1), ylab='coeff', xlab='p', pch=16)
legend("bottomleft", inset=.02,c('C(p)/C(0)','L(p)/L(0)'), pch=c(0,16))
for (i in 1:length(p)) {
for (j in 1:N) {
g <- sample_smallworld(1,200,4,p[i])
L[i] = L[i] + transitivity(g, "global")/N
C[i] = C[i] + average.path.length(g)/N
}
#L[i] = L[i]/N
#C[i] = C[i]/N
}
L <- L/L[1]
C <- C/C[1]
plot(p, L, ylim = c(0,1), ylab='coeff', xlab='p', pch=0, log='x')
points(p, C, ylim = c(0,1), ylab='coeff', xlab='p', pch=16)
legend("bottomleft", inset=.02,c('C(p)/C(0)','L(p)/L(0)'), pch=c(0,16))
for (i in 1:length(p)) {
for (j in 1:N) {
g <- sample_smallworld(1,400,4,p[i])
L[i] = L[i] + transitivity(g, "global")/N
C[i] = C[i] + average.path.length(g)/N
}
#L[i] = L[i]/N
#C[i] = C[i]/N
}
L <- L/L[1]
C <- C/C[1]
plot(p, L, ylim = c(0,1), ylab='coeff', xlab='p', pch=0, log='x')
points(p, C, ylim = c(0,1), ylab='coeff', xlab='p', pch=16)
legend("bottomleft", inset=.02,c('C(p)/C(0)','L(p)/L(0)'), pch=c(0,16))
N = 1000
L <- rep(0,length(p))
C <- rep(0,length(p))
for (i in 1:length(p)) {
for (j in 1:N) {
g <- sample_smallworld(1,400,4,p[i])
L[i] = L[i] + transitivity(g, "global")/N
C[i] = C[i] + average.path.length(g)/N
}
#L[i] = L[i]/N
#C[i] = C[i]/N
}
p <- 10^(seq(-4,0,0.1))
N = 100
L <- rep(0,length(p))
C <- rep(0,length(p))
for (i in 1:length(p)) {
for (j in 1:N) {
g <- sample_smallworld(1,400,4,p[i])
L[i] = L[i] + transitivity(g, "global")/N
C[i] = C[i] + average.path.length(g)/N
}
#L[i] = L[i]/N
#C[i] = C[i]/N
}
L <- L/L[1]
C <- C/C[1]
plot(p, L, ylim = c(0,1), ylab='coeff', xlab='p', pch=0, log='x')
points(p, C, ylim = c(0,1), ylab='coeff', xlab='p', pch=16)
legend("bottomleft", inset=.02,c('C(p)/C(0)','L(p)/L(0)'), pch=c(0,16))
L <- rep(0,length(p))
C <- rep(0,length(p))
for (i in 1:length(p)) {
for (j in 1:N) {
g <- sample_smallworld(1,400,4,p[i])
L[i] = L[i] + transitivity(g, "global")
C[i] = C[i] + average.path.length(g)
}
L[i] = L[i]/N
C[i] = C[i]/N
}
L <- L/L[1]
C <- C/C[1]
plot(p, L, ylim = c(0,1), ylab='coeff', xlab='p', pch=0, log='x')
points(p, C, ylim = c(0,1), ylab='coeff', xlab='p', pch=16)
legend("bottomleft", inset=.02,c('C(p)/C(0)','L(p)/L(0)'), pch=c(0,16))
L <- rep(0,length(p))
C <- rep(0,length(p))
for (i in 1:length(p)) {
for (j in 1:N) {
g <- sample_smallworld(1,400,4,p[i])
L[i] = L[i] + transitivity(g, "global")
#C[i] = C[i] + average.path.length(g)
C[i] = C[i] + mean_distance(g)
}
L[i] = L[i]/N
C[i] = C[i]/N
}
L <- L/L[1]
C <- C/C[1]
plot(p, L, ylim = c(0,1), ylab='coeff', xlab='p', pch=0, log='x')
points(p, C, ylim = c(0,1), ylab='coeff', xlab='p', pch=16)
legend("bottomleft", inset=.02,c('C(p)/C(0)','L(p)/L(0)'), pch=c(0,16))
help("average.path.length")
p <- 10^(seq(-4,0,0.1))
N = 100
L <- rep(0,length(p))
C <- rep(0,length(p))
for (i in 1:length(p)) {
for (j in 1:N) {
g <- sample_smallworld(1,400,4,p[i])
L[i] = L[i] + transitivity(g, "global")
C[i] = C[i] + mean_distance(g)
}
#L[i] = L[i]/N
#C[i] = C[i]/N
}
L <- L/(L[1]*N)
C <- C/(C[1]*N)
plot(p, L, ylim = c(0,1), ylab='coeff', xlab='p', pch=0, log='x')
points(p, C, ylim = c(0,1), ylab='coeff', xlab='p', pch=16)
legend("bottomleft", inset=.02,c('C(p)/C(0)','L(p)/L(0)'), pch=c(0,16))
L <- rep(0,length(p))
C <- rep(0,length(p))
for (i in 1:length(p)) {
for (j in 1:N) {
g <- sample_smallworld(1,400,4,p[i])
L[i] = L[i] + transitivity(g, "global")
C[i] = C[i] + mean_distance(g)
}
#L[i] = L[i]/N
#C[i] = C[i]/N
}
L <- L/(L[1]*N)
C <- C/(C[1]*N)
plot(p, L, ylim = c(0,1), ylab='coeff', xlab='p', pch=0, log='x')
points(p, C, ylim = c(0,1), ylab='coeff', xlab='p', pch=16)
legend("bottomleft", inset=.02,c('C(p)/C(0)','L(p)/L(0)'), pch=c(0,16))
p <- 10^(seq(-4,0,0.1))
N = 100
L <- rep(0,length(p))
C <- rep(0,length(p))
for (i in 1:length(p)) {
for (j in 1:N) {
g <- sample_smallworld(1,400,4,p[i])
L[i] = L[i] + transitivity(g, "global")
C[i] = C[i] + mean_distance(g)
}
#L[i] = L[i]/N
#C[i] = C[i]/N
}
L <- L/L[1]
C <- C/C[1]
plot(p, L, ylim = c(0,1), ylab='coeff', xlab='p', pch=0, log='x')
points(p, C, ylim = c(0,1), ylab='coeff', xlab='p', pch=16)
legend("bottomleft", inset=.02,c('C(p)/C(0)','L(p)/L(0)'), pch=c(0,16))
p <- 10^(seq(-4,0,0.2))
N = 10
L <- rep(0,length(p))
C <- rep(0,length(p))
for (i in 1:length(p)) {
for (j in 1:N) {
g <- sample_smallworld(1,1000,4,p[i])
L[i] = L[i] + transitivity(g, "global")
C[i] = C[i] + mean_distance(g)
}
L[i] = L[i]/N
C[i] = C[i]/N
}
L <- L/L[1]
C <- C/C[1]
plot(p, L, ylim = c(0,1), ylab='coeff', xlab='p', pch=0, log='x')
points(p, C, ylim = c(0,1), ylab='coeff', xlab='p', pch=16)
legend("bottomleft", inset=.02,c('C(p)/C(0)','L(p)/L(0)'), pch=c(0,16))
for (i in 1:length(p)) {
for (j in 1:N) {
g <- sample_smallworld(1,1000,2,p[i])
L[i] = L[i] + transitivity(g, "global")
C[i] = C[i] + mean_distance(g)
}
L[i] = L[i]/N
C[i] = C[i]/N
}
L <- L/L[1]
C <- C/C[1]
plot(p, L, ylim = c(0,1), ylab='coeff', xlab='p', pch=0, log='x')
points(p, C, ylim = c(0,1), ylab='coeff', xlab='p', pch=16)
legend("bottomleft", inset=.02,c('C(p)/C(0)','L(p)/L(0)'), pch=c(0,16))
# Note that the smaller the population and the larger the neighbourhood, then the clustering coefficient will be higher
g <- sample_smallworld(1,2000,3,p[i])
for (i in 1:length(p)) {
for (j in 1:N) {
# Note that the smaller the population and the larger the neighbourhood, then the clustering coefficient will be higher
g <- sample_smallworld(1,2000,3,p[i])
L[i] = L[i] + transitivity(g, "global")
C[i] = C[i] + mean_distance(g)
}
L[i] = L[i]/N
C[i] = C[i]/N
}
L <- rep(0,length(p))
C <- rep(0,length(p))
for (i in 1:length(p)) {
for (j in 1:N) {
# Note that the smaller the population and the larger the neighbourhood, then the clustering coefficient will be higher
g <- sample_smallworld(1,2000,3,p[i])
L[i] = L[i] + transitivity(g, "global")
C[i] = C[i] + mean_distance(g)
}
L[i] = L[i]/N
C[i] = C[i]/N
}
L <- L/L[1]
C <- C/C[1]
plot(p, L, ylim = c(0,1), ylab='coeff', xlab='p', pch=0, log='x')
points(p, C, ylim = c(0,1), ylab='coeff', xlab='p', pch=16)
legend("bottomleft", inset=.02,c('C(p)/C(0)','L(p)/L(0)'), pch=c(0,16))
help("reduce")
help("Reduce")
num_nodes = x <- 10^(seq(0,6,0.2))
apl_gnp <- function(n) average.path.length(sample_gnp(n, (1+0.0001)*log(n)/n))
mean_apl <- function(n) sum(rep(apl_gnp(n), 100))
ASP <- Reduce(mean_apl,num_nodes)
num_nodes = x <- 10^(seq(0.2,6,0.2))
apl_gnp <- function(n) average.path.length(sample_gnp(n, (1+0.0001)*log(n)/n))
mean_apl <- function(n) sum(rep(apl_gnp(n), 100))
ASP <- Reduce(mean_apl,num_nodes)
mean_apl(num_nodes)
num_nodes
int(num_nodes)
round(num_nodes)
num_nodes = round(10^(seq(0.2,6,0.2)))
apl_gnp <- function(n) average.path.length(sample_gnp(n, (1+0.0001)*log(n)/n))
mean_apl <- function(n) sum(rep(apl_gnp(n), 100))
ASP <- Reduce(mean_apl,num_nodes)
mean_apl(num_nodes)
mean_apl(num_nodes[2])
mean_apl(num_nodes[3])
mean_apl(num_nodes[4])
mean_apl(num_nodes[10])
ASP <- Map(mean_apl,num_nodes)
num_nodes = round(10^(seq(0,6,1)))
apl_gnp <- function(n) mean_distance(sample_gnp(n, (1+0.0001)*log(n)/n))
mean_apl <- function(n) sum(rep(apl_gnp(n), 100))
mean_apl <- function(n) sum(rep(apl_gnp(n), 10))
ASP <- Map(mean_apl,num_nodes)
ASP <- rep(0,length(num_nodes))
for ( i in 1:length(num_nodes) ){
for (j in 1:N) {
g <- sample_gnp(n, (1+0.0001)*log(n)/n)
ASP[i] = ASP[i] + average.path.length(g)
}
ASP[i] <- ASP[i]/N
}
ASP
plot(num_nodes[:6],ASP[:6])
plot(num_nodes[1:6],ASP[1:6])
ASP <- rep(0,length(num_nodes))
for ( i in 1:length(num_nodes) ){
for (j in 1:N) {
g <- sample_gnp(num_nodes[i], (1+0.1)*log(num_nodes[i])/num_nodes[i])
ASP[i] = ASP[i] + average.path.length(g)
}
ASP[i] <- ASP[i]/N
}
plot(num_nodes, ASP)
num_nodes = round(10^(seq(0.2,6,1)))
ASP <- rep(0,length(num_nodes))
for ( i in 1:length(num_nodes) ){
for (j in 1:N) {
g <- sample_gnp(num_nodes[i], (1+0.001)*log(num_nodes[i])/num_nodes[i])
ASP[i] = ASP[i] + average.path.length(g)
}
ASP[i] <- ASP[i]/N
print(i)
}
ASP
plot(num_nodes, ASP)
num_nodes = round(10^(seq(0.2,5,1)))
apl_gnp <- function(n) mean_distance(sample_gnp(n, (1+0.0001)*log(n)/n))
mean_apl <- function(n) sum(rep(apl_gnp(n), 10))
ASP <- Map(mean_apl,num_nodes)
ASP
plot(num_nodes, ASP)
num_nodes = round(10^(seq(0.1,5,0.2)))
apl_gnp <- function(n) mean_distance(sample_gnp(n, (1+0.0001)*log(n)/n))
mean_apl <- function(n) sum(rep(apl_gnp(n), 10))
ASP <- Map(mean_apl,num_nodes)
num_nodes = round(10^(seq(0.1,5,0.2)))
apl_gnp <- function(n) mean_distance(sample_gnp(n, (1+0.0001)*log(n)/n))
mean_apl <- function(n) sum(rep(apl_gnp(n), N))/N
ASP <- Map(mean_apl,num_nodes)
ASP <- rep(0,length(num_nodes))
for ( i in 1:length(num_nodes) ){
for (j in 1:N) {
g <- sample_gnp(num_nodes[i], (1+0.001)*log(num_nodes[i])/num_nodes[i])
ASP[i] = ASP[i] + average.path.length(g)
}
ASP[i] <- ASP[i]/N
print(i)
}
ASP[i] <- ASP[i]/j
plot(num_nodes, ASP)
ASP[i] <- ASP[i]*j
ASP[i] <- ASP[i]/(j-1)
plot(num_nodes, ASP)
plot(num_nodes, ASP, log="y")
plot(num_nodes, ASP)
plot(num_nodes, ASP, log="y")
plot(num_nodes, ASP)
plot(log(num_nodes), log(ASP))
plot(num_nodes, ASP)
library(igraph)
p <- 10^(seq(-4,0,0.2))
N = 100
L <- rep(0,length(p))
C <- rep(0,length(p))
for (i in 1:length(p)) {
for (j in 1:N) {
# Note that the smaller the population and the larger the neighbourhood, then the clustering coefficient will be higher
g <- sample_smallworld(1,2000,1,p[i])
L[i] = L[i] + transitivity(g, "global")
C[i] = C[i] + mean_distance(g)
}
L[i] = L[i]/N
C[i] = C[i]/N
}
L <- rep(0,length(p))
C <- rep(0,length(p))
# Note that the smaller the population and the larger the neighbourhood, then the clustering coefficient will be higher
g <- sample_smallworld(1,1000,1,p[i])
L[i] = L[i] + transitivity(g, "global")
C[i] = C[i] + mean_distance(g)
L[i] = L[i]/N
C[i] = C[i]/N
for (neigh in c(1,2,3,4,5) ){
L <- rep(0,length(p))
C <- rep(0,length(p))
for (i in 1:length(p)) {
for (j in 1:N) {
# Note that the smaller the population and the larger the neighbourhood, then the clustering coefficient will be higher
g <- sample_smallworld(1,NODES,neigh,p[i])
L[i] = L[i] + transitivity(g, "global")
C[i] = C[i] + mean_distance(g)
}
L[i] = L[i]/N
C[i] = C[i]/N
}
L <- L/L[1]
C <- C/C[1]
plot(p, L, ylim = c(0,1), ylab='coeff', xlab='p', pch=0, log='x')
points(p, C, ylim = c(0,1), ylab='coeff', xlab='p', pch=16, main= paste("Transitivity and Mean distance for WS with ",NODES," nodes and neigh = ",neigh))
legend("bottomleft", inset=.02,c('C(p)/C(0)','L(p)/L(0)'), pch=c(0,16))
}
N = 100
NODES = 1000
library(igraph)
p <- 10^(seq(-4,0,0.2))
N = 100
NODES = 1000
for (neigh in c(1,2,3,4,5) ){
L <- rep(0,length(p))
C <- rep(0,length(p))
for (i in 1:length(p)) {
for (j in 1:N) {
# Note that the smaller the population and the larger the neighbourhood, then the clustering coefficient will be higher
g <- sample_smallworld(1,NODES,neigh,p[i])
L[i] = L[i] + transitivity(g, "global")
C[i] = C[i] + mean_distance(g)
}
L[i] = L[i]/N
C[i] = C[i]/N
}
L <- L/L[1]
C <- C/C[1]
plot(p, L, ylim = c(0,1), ylab='coeff', xlab='p', pch=0, log='x')
points(p, C, ylim = c(0,1), ylab='coeff', xlab='p', pch=16, main= paste("Transitivity and Mean distance for WS with ",NODES," nodes and neigh = ",neigh))
legend("bottomleft", inset=.02,c('C(p)/C(0)','L(p)/L(0)'), pch=c(0,16))
}
plot(p, L, ylim = c(0,1), ylab='coeff', xlab='p', pch=0, log='x', , main= paste("Transitivity and Mean distance for WS with ",NODES," nodes and neigh = ",neigh,sep=""))
points(p, C, ylim = c(0,1), ylab='coeff', xlab='p', pch=16)
legend("bottomleft", inset=.02,c('C(p)/C(0)','L(p)/L(0)'), pch=c(0,16))
for (neigh in c(1,2,3,4,5) ){
L <- rep(0,length(p))
C <- rep(0,length(p))
for (i in 1:length(p)) {
for (j in 1:N) {
# Note that the smaller the population and the larger the neighbourhood, then the clustering coefficient will be higher
g <- sample_smallworld(1,NODES,neigh,p[i])
L[i] = L[i] + transitivity(g, "global")
C[i] = C[i] + mean_distance(g)
}
L[i] = L[i]/N
C[i] = C[i]/N
}
L <- L/L[1]
C <- C/C[1]
pdf(paste("./plots/WS_neigh_",neigh,".pdf", sep=""))
plot(p, L, ylim = c(0,1), ylab='coeff', xlab='p', pch=0, log='x', , main= paste("Transitivity and Mean distance for WS with ",NODES," nodes and neigh = ",neigh,sep=""))
points(p, C, ylim = c(0,1), ylab='coeff', xlab='p', pch=16)
legend("bottomleft", inset=.02,c('C(p)/C(0)','L(p)/L(0)'), pch=c(0,16))
}
for (neigh in c(1,2,3,4,5) ){
L <- rep(0,length(p))
C <- rep(0,length(p))
for (i in 1:length(p)) {
for (j in 1:N) {
# Note that the smaller the population and the larger the neighbourhood, then the clustering coefficient will be higher
g <- sample_smallworld(1,NODES,neigh,p[i])
L[i] = L[i] + transitivity(g, "global")
C[i] = C[i] + mean_distance(g)
}
L[i] = L[i]/N
C[i] = C[i]/N
}
L <- L/L[1]
C <- C/C[1]
pdf(paste("./plots/WS_neigh_",neigh,".pdf", sep=""))
plot(p, L, ylim = c(0,1), ylab='coeff', xlab='p', pch=0, log='x', , main= paste("Transitivity and Mean distance for WS with ",NODES," nodes and neigh = ",neigh,sep=""))
points(p, C, ylim = c(0,1), ylab='coeff', xlab='p', pch=16)
legend("bottomleft", inset=.02,c('C(p)/C(0)','L(p)/L(0)'), pch=c(0,16))
dev.off()
}
#for (neigh in c(2,3,4,5) ){
for (neigh in c(6,8,10,20) ){
L <- rep(0,length(p))
C <- rep(0,length(p))
for (i in 1:length(p)) {
for (j in 1:N) {
# Note that the smaller the population and the larger the neighbourhood, then the clustering coefficient will be higher
g <- sample_smallworld(1,NODES,neigh,p[i])
L[i] = L[i] + transitivity(g, "global")
C[i] = C[i] + mean_distance(g)
}
L[i] = L[i]/N
C[i] = C[i]/N
}
L <- L/L[1]
C <- C/C[1]
pdf(paste("./plots/WS_neigh_",neigh,".pdf", sep=""))
plot(p, L, ylim = c(0,1), ylab='coeff', xlab='p', pch=0, log='x', , main= paste("Transitivity and Mean distance for WS with ",NODES," nodes and neigh = ",neigh,sep=""))
points(p, C, ylim = c(0,1), ylab='coeff', xlab='p', pch=16)
legend("bottomleft", inset=.02,c('C(p)/C(0)','L(p)/L(0)'), pch=c(0,16))
dev.off()
}
